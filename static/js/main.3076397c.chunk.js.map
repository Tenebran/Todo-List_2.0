{"version":3,"sources":["modules/components/AddItemForm/AddItemForm.tsx","modules/components/Button/Button.tsx","modules/components/EditTableSpan/EditTableSpan.tsx","modules/components/Task/Task.tsx","modules/components/Todolist/Todolist.tsx","modules/state/todolists-reducer.tsx","modules/state/task-reducer.tsx","App.tsx","modules/state/store/store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","size","label","value","onChange","e","currentTarget","onKeyPress","key","trim","addItem","IconButton","color","onClick","fontSize","ButtonFilter","nameClass","className","callBack","title","EditTableSpan","editMode","setEditMode","setTitle","id","inputProps","onBlur","autoFocus","onDoubleClick","Task","dispatch","useDispatch","changeTitleHandler","useCallback","newValue","changeTaskTitleAC","task","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","checked","isDone","newIsDoneValue","changeTaskStatusAC","changeStatusHandler","aria-label","removeTaskAC","Todolist","tasks","useSelector","state","changeAllFilter","changeFilter","changeActiveFilter","changeCompletedFilter","changeTodoListTitle","changeTodolistTitle","addTask","addTaskAC","taskTodolist","filterTask","filter","list","removeTodolist","map","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTE","initialState","v1","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","taskId","todolistId","type","newTodolistTitle","IsDone","App","todolist","action","changeValue","RemoveTodolistAC","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","justify","spacing","item","Paper","elevation","rootReducers","combineReducers","newTask","newTasks","todolistTask","stateCopy","newTodolist","todolistFind","find","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3076397c.chunk.js","sourcesContent":["import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\nimport './AddItemForm.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\n\r\ntype addItemFormPropsType = {\r\n  addItem: (newValue: string) => void;\r\n};\r\n\r\nconst AddItemForm = React.memo((props: addItemFormPropsType) => {\r\n  let [newTaskTitle, setNewTaskTitle] = useState('');\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTaskTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const addTask = () => {\r\n    if (newTaskTitle.trim() !== '') {\r\n      props.addItem(newTaskTitle);\r\n      setNewTaskTitle('');\r\n      setError(null);\r\n    } else {\r\n      setError('Field is required');\r\n    }\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.key === 'Enter') {\r\n      if (newTaskTitle.trim() !== '') {\r\n        props.addItem(newTaskTitle);\r\n        setNewTaskTitle('');\r\n      } else {\r\n        setError('Field is required');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        label={!!error ? error : 'Type Text'}\r\n        error={!!error}\r\n        value={newTaskTitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addTask} size=\"small\">\r\n        <NoteAddIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport './Button.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ButtonPropsType = {\r\n  title: string;\r\n  callBack: () => void;\r\n  nameClass: string;\r\n};\r\n\r\nconst ButtonFilter = React.memo((props: ButtonPropsType) => {\r\n  return (\r\n    <Button\r\n      color={props.nameClass ? 'primary' : 'default'}\r\n      variant=\"contained\"\r\n      className={props.nameClass}\r\n      onClick={props.callBack}\r\n    >\r\n      {props.title}\r\n    </Button>\r\n  );\r\n});\r\nexport default ButtonFilter;\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\ntype EditTableSpanPropsType = {\r\n  title: string;\r\n  nameClass?: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nconst EditTableSpan = React.memo((props: EditTableSpanPropsType) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [title, setTitle] = useState('');\r\n\r\n  const activeModeOn = () => {\r\n    setEditMode(true);\r\n    setTitle(props.title);\r\n  };\r\n\r\n  const activeModeOff = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField\r\n      id=\"standard-basic\"\r\n      inputProps={{ 'aria-label': 'description' }}\r\n      onBlur={activeModeOff}\r\n      value={title}\r\n      autoFocus\r\n      onChange={onChangeTitleHandler}\r\n      size=\"small\"\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activeModeOn} className={props.nameClass}>\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport default EditTableSpan;\r\n","import { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport './Task.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport EditTableSpan from '../EditTableSpan/EditTableSpan';\r\nimport { TasksType } from '../Todolist/Todolist';\r\n\r\ntype TaskProps = {\r\n  id: string;\r\n  task: TasksType;\r\n  addTaskAC: (newTodolistTitle: string, id: string) => void;\r\n  changeTaskStatusAC: (taskId: string, IsDone: boolean, todolistId: string) => void;\r\n  changeTaskTitleAC: (taskId: string, title: string, todolistId: string) => void;\r\n  removeTaskAC: (taskId: string, todolistId: string) => void;\r\n};\r\n\r\nconst Task = React.memo((props: TaskProps) => {\r\n  const dispatch = useDispatch();\r\n  const onClickHandlerRemove = () => dispatch(props.removeTaskAC(props.task.id, props.id));\r\n  const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked;\r\n    dispatch(props.changeTaskStatusAC(props.task.id, newIsDoneValue, props.id));\r\n  };\r\n  const changeTitleHandler = useCallback(\r\n    (newValue: string) => {\r\n      dispatch(props.changeTaskTitleAC(props.task.id, newValue, props.id));\r\n    },\r\n    [props, dispatch]\r\n  );\r\n\r\n  return (\r\n    <li className=\"todolist__list\">\r\n      <Checkbox\r\n        icon={<FavoriteBorder />}\r\n        checkedIcon={<Favorite />}\r\n        name=\"checked\"\r\n        checked={props.task.isDone}\r\n        onChange={e => changeStatusHandler(e)}\r\n      />\r\n\r\n      <EditTableSpan\r\n        title={props.task.title}\r\n        nameClass={props.task.isDone ? 'todolist__done' : ''}\r\n        onChange={changeTitleHandler}\r\n      />\r\n      <IconButton aria-label=\"delete\" onClick={e => onClickHandlerRemove()}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n});\r\n\r\nexport default Task;\r\n","import React, { useCallback } from 'react';\r\nimport { KeyType } from '../../../App';\r\nimport './Todolist.scss';\r\nimport AddItemForm from '../AddItemForm/AddItemForm';\r\nimport ButtonFilter from '../Button/Button';\r\nimport EditTableSpan from '../EditTableSpan/EditTableSpan';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Task from '../Task/Task';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../state/store/store';\r\n\r\nexport type TasksType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n};\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  changeFilter: (changeValue: KeyType, filterId: string) => void;\r\n  filterTask: KeyType;\r\n  id: string;\r\n  removeTodolist: (id: string) => void;\r\n  changeTodolistTitle: (id: string, title: string) => void;\r\n  addTaskAC: (newTodolistTitle: string, id: string) => void;\r\n  changeTaskStatusAC: (taskId: string, IsDone: boolean, todolistId: string) => void;\r\n  changeTaskTitleAC: (taskId: string, title: string, todolistId: string) => void;\r\n  removeTaskAC: (taskId: string, todolistId: string) => void;\r\n};\r\n\r\nconst Todolist = React.memo((props: PropsType) => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootState, Array<TasksType>>(state => state.task[props.id]);\r\n\r\n  const changeAllFilter = useCallback(() => props.changeFilter('all', props.id), [props]);\r\n  const changeActiveFilter = useCallback(() => props.changeFilter('active', props.id), [props]);\r\n  const changeCompletedFilter = useCallback(\r\n    () => props.changeFilter('complited', props.id),\r\n    [props]\r\n  );\r\n\r\n  const removeTodoList = () => {\r\n    props.removeTodolist(props.id);\r\n  };\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (title: string) => {\r\n      props.changeTodolistTitle(props.id, title);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      dispatch(props.addTaskAC(title, props.id));\r\n    },\r\n    [dispatch, props]\r\n  );\r\n\r\n  let taskTodolist = tasks;\r\n  if (props.filterTask === 'active') {\r\n    taskTodolist = tasks.filter(list => !list.isDone);\r\n  }\r\n  if (props.filterTask === 'complited') {\r\n    taskTodolist = tasks.filter(list => list.isDone);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditTableSpan title={props.title} onChange={changeTodoListTitle} />\r\n        <IconButton aria-label=\"delete\" onClick={removeTodoList}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} />\r\n      <ul className=\"todolist__list__wrapper\">\r\n        {taskTodolist.map(list => (\r\n          <Task\r\n            key={list.id}\r\n            task={list}\r\n            id={props.id}\r\n            addTaskAC={props.addTaskAC}\r\n            changeTaskStatusAC={props.changeTaskStatusAC}\r\n            changeTaskTitleAC={props.changeTaskTitleAC}\r\n            removeTaskAC={props.removeTaskAC}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <div className=\"todolist__button__wrapper\">\r\n        <ButtonFilter\r\n          callBack={changeAllFilter}\r\n          title={'All'}\r\n          nameClass={props.filterTask === 'all' ? 'button__filter' : ''}\r\n        />\r\n        <ButtonFilter\r\n          callBack={changeActiveFilter}\r\n          title={'Active'}\r\n          nameClass={props.filterTask === 'active' ? 'button__filter' : ''}\r\n        />\r\n        <ButtonFilter\r\n          callBack={changeCompletedFilter}\r\n          title={'Completed'}\r\n          nameClass={props.filterTask === 'complited' ? 'button__filter' : ''}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Todolist;\r\n","import { v1 } from 'uuid';\r\nimport { TodolistType, KeyType } from '../../App';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE';\r\nconst CHANGE_TODOLIST_FILTE = 'CHANGE-TODOLIST-FILTER';\r\n\r\nexport type ActionsTypes =\r\n  | ReturnType<typeof RemoveTodolistAC>\r\n  | ReturnType<typeof AddTodolistAc>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>;\r\n\r\nexport let todolist1 = v1();\r\nexport let todolist2 = v1();\r\nconst initialState: Array<TodolistType> = [];\r\n\r\nexport const todolistReducer = (\r\n  state: Array<TodolistType> = initialState,\r\n  action: ActionsTypes\r\n): Array<TodolistType> => {\r\n  switch (action.type) {\r\n    case REMOVE_TODOLIST:\r\n      return state.filter(list => list.id !== action.id);\r\n\r\n    case ADD_TODOLIST: {\r\n      const newTodolist: TodolistType = {\r\n        title: action.title,\r\n        id: action.todolistId,\r\n        filter: 'all',\r\n      };\r\n      return [newTodolist, ...state];\r\n    }\r\n\r\n    case CHANGE_TODOLIST_TITLE: {\r\n      const todolistFind = state.find(list => list.id === action.id);\r\n      if (todolistFind) {\r\n        todolistFind.title = action.title;\r\n      }\r\n      return [...state];\r\n    }\r\n    case CHANGE_TODOLIST_FILTE: {\r\n      const todolist = state.find(list => list.id === action.id);\r\n      if (todolist) {\r\n        todolist.filter = action.filter;\r\n      }\r\n      return [...state];\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const RemoveTodolistAC = (todolistId: string) => {\r\n  return { type: REMOVE_TODOLIST, id: todolistId } as const;\r\n};\r\n\r\nexport const AddTodolistAc = (newTodolistTitle: string) => {\r\n  return {\r\n    type: ADD_TODOLIST,\r\n    title: newTodolistTitle,\r\n    todolistId: v1(),\r\n  } as const;\r\n};\r\n\r\nexport const changeTodolistTitleAC = (newTodolistTitle: string, todolistId: string) => {\r\n  return {\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    id: todolistId,\r\n    title: newTodolistTitle,\r\n  } as const;\r\n};\r\n\r\nexport const changeTodolistFilterAC = (filter: KeyType, id: string) => {\r\n  return {\r\n    type: CHANGE_TODOLIST_FILTE,\r\n    id: id,\r\n    filter: filter,\r\n  } as const;\r\n};\r\n","import { v1 } from 'uuid';\r\nimport { TasksStateType } from '../../App';\r\nimport {\r\n  AddTodolistAc,\r\n  RemoveTodolistAC,\r\n  REMOVE_TODOLIST,\r\n  ADD_TODOLIST,\r\n} from './todolists-reducer';\r\n\r\nconst REMOVE_TASK = 'REMOVE-TASK';\r\nconst ADD_TASK = 'ADD-TASKS';\r\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS';\r\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE';\r\n\r\ntype ActionsTypes =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof changeTaskStatusAC>\r\n  | ReturnType<typeof changeTaskTitleAC>\r\n  | ReturnType<typeof AddTodolistAc>\r\n  | ReturnType<typeof RemoveTodolistAC>;\r\n\r\nconst initialState: TasksStateType = {};\r\nexport const tasksReducer = (\r\n  state: TasksStateType = initialState,\r\n  action: ActionsTypes\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case REMOVE_TASK: {\r\n      const tasks = state[action.todolistId];\r\n      const filterTask = tasks.filter(list => list.id !== action.taskId);\r\n      state[action.todolistId] = filterTask;\r\n      return { ...state };\r\n    }\r\n    case ADD_TASK: {\r\n      const newTask = { id: v1(), title: action.title, isDone: false };\r\n      const newTasks = [newTask, ...state[action.id]];\r\n      state[action.id] = newTasks;\r\n\r\n      return { ...state };\r\n    }\r\n\r\n    case CHANGE_TASK_STATUS: {\r\n      let todolistTask = state[action.todolistId];\r\n      state[action.todolistId] = todolistTask.map(list =>\r\n        list.id === action.taskId ? { ...list, isDone: action.IsDone } : list\r\n      );\r\n\r\n      return { ...state };\r\n    }\r\n\r\n    case CHANGE_TASK_TITLE: {\r\n      let todolistTask = state[action.todolistId];\r\n      state[action.todolistId] = todolistTask.map(list =>\r\n        list.id === action.taskId ? { ...list, title: action.title } : list\r\n      );\r\n      return { ...state };\r\n    }\r\n\r\n    case ADD_TODOLIST: {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = [];\r\n      return stateCopy;\r\n    }\r\n\r\n    case REMOVE_TODOLIST: {\r\n      const stateCopy = { ...state };\r\n      delete stateCopy[action.id];\r\n      return stateCopy;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n  return { type: REMOVE_TASK, taskId, todolistId } as const;\r\n};\r\n\r\nexport const addTaskAC = (newTodolistTitle: string, id: string) => {\r\n  return {\r\n    type: ADD_TASK,\r\n    title: newTodolistTitle,\r\n    id,\r\n  } as const;\r\n};\r\n\r\nexport const changeTaskStatusAC = (taskId: string, IsDone: boolean, todolistId: string) => {\r\n  return {\r\n    type: CHANGE_TASK_STATUS,\r\n    taskId,\r\n    IsDone,\r\n    todolistId,\r\n  } as const;\r\n};\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n  return {\r\n    type: CHANGE_TASK_TITLE,\r\n    taskId,\r\n    todolistId,\r\n    title,\r\n  } as const;\r\n};\r\n","import React, { useCallback } from 'react';\nimport Todolist, { TasksType } from './modules/components/Todolist/Todolist';\nimport './App.scss';\nimport AddItemForm from './modules/components/AddItemForm/AddItemForm';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Container, Toolbar } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Grid } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  AddTodolistAc,\n  changeTodolistFilterAC,\n  changeTodolistTitleAC,\n  RemoveTodolistAC,\n} from './modules/state/todolists-reducer';\nimport {\n  addTaskAC,\n  changeTaskStatusAC,\n  changeTaskTitleAC,\n  removeTaskAC,\n} from './modules/state/task-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './modules/state/store/store';\n\nexport type KeyType = 'all' | 'complited' | 'active';\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  filter: KeyType;\n};\n\nexport type TasksStateType = {\n  [key: string]: Array<TasksType>;\n};\n\nconst App = React.memo(() => {\n  const dispatch = useDispatch();\n  const todolist = useSelector<AppRootState, Array<TodolistType>>(state => state.todolist);\n\n  const addItem = useCallback(\n    (title: string) => {\n      const action = AddTodolistAc(title);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  const changeFilter = useCallback(\n    (changeValue: KeyType, todolistId: string) => {\n      const action = changeTodolistFilterAC(changeValue, todolistId);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  const removeTodolist = useCallback(\n    (todolistId: string) => {\n      const action = RemoveTodolistAC(todolistId);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  const changeTodolistTitle = useCallback(\n    (id: string, title: string) => {\n      const action = changeTodolistTitleAC(id, title);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"fixed\">\n        <Toolbar className=\"header\">\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\" variant={'outlined'}>\n            Login\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Container fixed className=\"todoList__form\">\n        <Grid container justify=\"center\">\n          <AddItemForm addItem={addItem} />\n        </Grid>\n\n        <Grid container spacing={3}>\n          {todolist.map(list => {\n            return (\n              <Grid item key={list.id}>\n                <Paper elevation={3} className=\"paper__style\">\n                  <Todolist\n                    title={list.title}\n                    changeFilter={changeFilter}\n                    filterTask={list.filter}\n                    id={list.id}\n                    removeTodolist={removeTodolist}\n                    changeTodolistTitle={changeTodolistTitle}\n                    addTaskAC={addTaskAC}\n                    changeTaskStatusAC={changeTaskStatusAC}\n                    changeTaskTitleAC={changeTaskTitleAC}\n                    removeTaskAC={removeTaskAC}\n                  />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n});\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\r\nimport { tasksReducer } from '../task-reducer';\r\nimport { todolistReducer } from '../todolists-reducer';\r\n\r\nconst rootReducers = combineReducers({ task: tasksReducer, todolist: todolistReducer });\r\n\r\nexport  type AppRootState = ReturnType<typeof rootReducers>;\r\n\r\nexport const store = createStore(rootReducers);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './modules/state/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}