{"version":3,"sources":["api/todolists-api.ts","modules/state/auth-reducer.ts","modules/state/appReducer.ts","modules/state/todolists-reducer.tsx","modules/state/task-reducer.tsx","modules/utils/error-utils.ts","modules/components/ErrorSnackbar/ErrorSnackbar.tsx","modules/components/Login/Login.tsx","modules/components/AddItemForm/AddItemForm.tsx","modules/components/Button/Button.tsx","modules/components/EditTableSpan/EditTableSpan.tsx","modules/components/Task/Task.tsx","modules/components/Todolist/Todolist.tsx","modules/components/Todolists/Todolists.tsx","App.tsx","modules/state/store/store.ts","index.tsx"],"names":["TaskStatuses","TaskPrioties","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolisID","delete","put","todolistID","taskId","todolistId","taskTitile","model","authAPI","data","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","appSetStatusAC","appSetErrorAC","REMOVE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTE","v1","fetchTodolistsThunk","dispatch","getState","then","res","todolists","removeTodolistTC","id","RemoveTodolistAC","addTodolistTC","resp","todolist","resultCode","item","catch","err","changeTodolistTitleTC","REMOVE_TASK","ADD_TASK","CHANGE_TASK","removeTaskAC","addTaskAC","task","addTaskTC","todoID","taskTitle","messages","length","handleServerAppError","message","handleServerNetworkError","updateTaskTC","todoId","domainModel","clickedTask","find","t","priority","description","startDate","deadline","completed","changeTaskAC","Alert","props","elevation","variant","ErrorSnackbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","Grid","container","justify","xs","handleSubmit","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","React","memo","useState","newTaskTitle","setNewTaskTitle","setError","size","onChange","e","currentTarget","onKeyPress","key","trim","addItem","disabled","entityStatus","IconButton","onClick","fontSize","ButtonFilter","nameClass","className","callBack","EditTableSpan","editMode","setEditMode","setTitle","inputProps","onBlur","autoFocus","onDoubleClick","Task","onClickHandlerRemove","changeTitleHandler","useCallback","icon","FavoriteBorder","checkedIcon","Favorite","name","checked","Completed","New","changeStatusHandler","aria-label","Todolist","useEffect","tasks","setTasksAC","items","changeAllFilter","changeFilter","changeActiveFilter","changeCompletedFilter","changeTodoListTitle","changeTodolistTitle","addTask","taskTodolist","filterTask","filter","list","removeTodolist","map","Todolists","Container","fixed","spacing","Paper","App","console","log","changeValue","action","AppBar","position","Toolbar","edge","Typography","LinearProgress","exact","path","render","from","to","rootReducers","combineReducers","stateCopy1","forEach","stateCopy","todoListId","newTasks","newTodolist","todolistFind","login","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"6PAqCYA,EAOAC,E,+IAnCNC,E,OAAWC,EAAMC,OAAN,aACfC,QAAS,iDARM,CACfC,iBAAiB,EACjBC,QAAS,CACP,UAAW,4C,SAgCHP,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KA4BL,IAAMO,EAAe,WAExB,OAAON,EAASO,IAAyB,eAFhCD,EAAe,SAKVE,GACd,OAAOR,EAASS,KAA2C,aAAc,CAAED,WANlEF,EAAe,SASXI,GACb,OAAOV,EAASW,OAAT,qBAA4CD,KAV1CJ,EAAe,SAaXI,EAAmBF,GAChC,OAAOR,EAASY,IAAT,qBAAyCF,GAAa,CAAEF,WAdtDF,EAAe,SAiBjBO,GACP,OAAOb,EAASO,IAAT,qBAA4CM,EAA5C,YAlBEP,EAAe,SAoBdO,EAAoBC,GAC9B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArB9DR,EAAe,SAuBfS,EAAoBC,GAC7B,OAAOhB,EAASS,KAAT,qBAA8DM,EAA9D,UAAkF,CACvFP,MAAOQ,KAzBAV,EAAe,SA4BfS,EAAoBD,EAAgBG,GAC7C,OAAOjB,EAASY,IAAT,qBAAmDG,EAAnD,kBAAuED,GAAUG,IAwB/EC,EAAU,SACfC,GACJ,OAAOnB,EAASS,KAAT,cAA+DU,ICzHpEC,EAAe,CACnBC,YAAY,GAgBDC,EAAkB,SAACC,GAAD,MAC5B,CAAEC,KAAM,yBAA0BD,UClB/BH,EAAe,CACnBK,OAAQ,OACRC,MAAO,MAoBIC,EAAiB,SAACF,GAC7B,MAAO,CAAED,KAAM,iBAAkBC,WAGtBG,EAAgB,SAACF,GAC5B,MAAO,CAAEF,KAAM,gBAAiBE,UCzBrBG,EAAkB,kBAClBC,EAAe,eACtBC,EAAwB,wBACxBC,EAAwB,yBAcxBZ,GAFiBa,cACAA,cACyB,IA4FnCC,EAAsB,SACjCC,EACAC,GAEAD,EAASR,EAAe,YACxBrB,IAA4B+B,MAAK,SAAAC,GAC/BH,EATK,CAAEX,KAAM,gBAAiBe,UASND,EAAInB,OAC5BgB,EAASR,EAAe,kBAIfa,EAAmB,SAACzB,GAAD,OAAwB,SAACoB,GACvDA,EAASR,EAAe,YACxBQ,EApBO,CAAEX,KAAM,6BAA8BC,OAoBb,UApBqBZ,WAoBVE,IAC3CT,EAA4BS,GAAYsB,MAAK,SAAAC,GAC3CH,EAlD4B,SAACpB,GAC/B,MAAO,CAAES,KAAMK,EAAiBY,GAAI1B,GAiDzB2B,CAAiB3B,IAC1BoB,EAASR,EAAe,mBAIfgB,EAAgB,SAACnC,GAAD,OAAmB,SAAC2B,GAC/CA,EAASR,EAAe,YACxBrB,EACmBE,GAChB6B,MAAK,SAAAO,GAvDmB,IAACC,EAwDK,IAAzBD,EAAKzB,KAAK2B,aACZX,GAzDsBU,EAyDCD,EAAKzB,KAAKA,KAAK4B,KAxDrC,CACLvB,KAAMM,EACNe,cAuDIV,EAASR,EAAe,kBAK3BqB,OAAM,SAACC,SAKCC,EAAwB,SAACxC,EAAmBF,GAApB,OAAsC,SAAC2B,GAC1EA,EAASR,EAAe,YACxBrB,EAA4BI,EAAWF,GAAO6B,MAAK,SAAAO,GACjDT,EA/DK,CACLX,KAAMO,EACNU,GA6DsC/B,EA5DtCF,MA4D+BA,IAC/B2B,EAASR,EAAe,mB,QC9ItBwB,EAAc,cACdC,EAAW,YACXC,EAAc,cAYdjC,EAA+B,GAyDxBkC,EAAe,SAACxC,EAAgBC,GAC3C,MAAO,CAAES,KAAM2B,EAAarC,SAAQC,eAEzBwC,EAAY,SAACC,GACxB,MAAO,CACLhC,KAAM4B,EACNI,SAsCSC,EAAY,SAACC,EAAgBC,GAAjB,OAAuC,SAACxB,GAC/DA,EAASR,EAAe,YACxBrB,EACcoD,EAAQC,GACnBtB,MAAK,SAAAC,GACJ,GAA4B,IAAxBA,EAAInB,KAAK2B,WAAkB,CAC7B,IAAIU,EAAOlB,EAAInB,KAAKA,KAAK4B,KACzBZ,EAASoB,EAAUC,IACnBrB,EAASR,EAAe,mBCzHI,SAClCQ,EACAhB,GAEIA,EAAKyC,SAASC,QAChB1B,EAASP,EAAcT,EAAKyC,SAAS,KACrCzB,EAASR,EAAe,eAExBQ,EAASP,EAAc,eDmHnBkC,CAAqB3B,EAAUG,EAAInB,SAGtC6B,OAAM,SAACC,ICtI4B,SACtCd,EACA4B,GAEA5B,EAASP,EAAcmC,IACvB5B,EAASR,EAAe,WDkIpBqC,CAAyB7B,EAAUc,EAAIc,cAchCE,EAAe,SAC1BC,EACApD,EACAqD,GAH0B,OAIvB,SAAChC,EAAoBC,GACxBD,EAASR,EAAe,YACxB,IAIMyC,EAJWhC,IACSoB,KACWU,GAEGG,MAAK,SAAAC,GAC3C,OAAOA,EAAE7B,KAAO3B,KAGlB,GAAIsD,EAAa,CACf,IAAMnD,EAAqB,aACzBT,MAAO4D,EAAY5D,MACnBiB,OAAQ2C,EAAY3C,OACpB8C,SAAUH,EAAYG,SACtBC,YAAaJ,EAAYI,YACzBC,UAAWL,EAAYK,UACvBC,SAAUN,EAAYM,SACtBC,UAAWP,EAAYO,WACpBR,GAGL7D,EAAwB4D,EAAQpD,EAAQG,GAAOoB,MAAK,SAAAC,GAClDH,EAzFsB,SAC1BrB,EACAC,EACAE,GAEA,MAAO,CACLO,KAAM6B,EACNvC,SACAG,QACAF,cAgFW6D,CAAa9D,EAAQoD,EAAQC,IACtChC,EAASR,EAAe,oB,8CEpL9B,SAASkD,GAAMC,GACb,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAG/C,SAASG,KACd,IAAM9C,EAAW+C,cACXxD,EAAQyD,aAAyC,SAAAC,GAAK,OAAIA,EAAMC,IAAI3D,SAEpE4D,EAAc,SAACC,EAA8BC,GAClC,cAAXA,GAGJrD,EAASP,EAAc,QAGzB,OACE,eAAC6D,GAAA,EAAD,CAAUC,KAAgB,OAAVhE,EAAgBiE,iBAAkB,IAAMC,QAASN,EAAjE,SACE,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACGnE,M,yECHIoE,GAAQ,WACnB,IAAM3D,EAAW+C,cAEXa,EAASC,aAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEdC,SAAU,SAAAC,GACR,IAAMC,EAA0B,GAYhC,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAClEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKZI,EAAOH,SAEDG,EAAOH,SAAStC,QAAU,IACnC0C,EAAOJ,SAAW,kCAFlBI,EAAOJ,SAAW,YAIbI,GAGTE,SAAU,SAAAH,GNpBS,IAACnF,EMqBlBgB,GNrBkBhB,EMqBDmF,ENrB2B,SAACnE,GACjDA,EAASR,EAAe,YAExBT,EAAcC,GAAMkB,MAAK,SAAAC,GACK,IAAxBA,EAAInB,KAAK2B,aACXX,EAASb,GAAgB,IACzBa,EAASR,EAAe,qBMgBxBoE,EAAOW,eAIX,OACE,eAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACE,eAACF,GAAA,EAAD,CAAM5D,MAAI,EAAC+D,GAAI,EAAf,SACE,wBAAML,SAAUV,EAAOgB,aAAvB,UACE,gBAACC,GAAA,EAAD,WACE,0DAEE,oBAAGC,KAAM,wCAAyCC,OAAQ,SAA1D,qBAIF,yEACA,2DACA,mDAEF,gBAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,aAAWC,MAAM,QAAQC,OAAO,UAAavB,EAAOwB,cAAc,WACjExB,EAAOyB,QAAQtB,OAAS,sBAAKuB,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOQ,OAAOL,QACtE,eAACkB,GAAA,EAAD,aACE5F,KAAK,WACL6F,MAAM,WACNC,OAAO,UACHvB,EAAOwB,cAAc,cAE1BxB,EAAOyB,QAAQrB,UACd,sBAAKsB,MAAO,CAAEC,MAAO,OAArB,SAA+B3B,EAAOQ,OAAOJ,WAG/C,eAACwB,GAAA,EAAD,CACEN,MAAO,cACPO,QAAS,eAACC,GAAA,EAAD,eAAc9B,EAAOwB,cAAc,kBAE9C,eAACO,EAAA,EAAD,CAAQtG,KAAM,SAAUwD,QAAS,YAAa0C,MAAO,UAArD,8B,0DCjBGK,GAxDKC,IAAMC,MAAK,SAACnD,GAC9B,MAAsCoD,mBAAS,IAA/C,oBAAKC,EAAL,KAAmBC,EAAnB,KACA,EAAwBF,mBAAwB,MAAhD,oBAAKxG,EAAL,KAAY2G,EAAZ,KA8BA,OACE,iCACE,eAACjB,GAAA,EAAD,CACEpC,QAAQ,WACRsD,KAAK,QACLjB,MAAS3F,GAAgB,YACzBA,QAASA,EACTH,MAAO4G,EACPI,SApCkB,SAACC,GACvBJ,EAAgBI,EAAEC,cAAclH,QAoC5BmH,WAvBoB,SAACF,GACX,OAAV9G,GACF2G,EAAS,MAEG,UAAVG,EAAEG,MACwB,KAAxBR,EAAaS,QACf9D,EAAM+D,QAAQV,GACdC,EAAgB,KAEhBC,EAAS,uBAeTS,SAAiC,YAAvBhE,EAAMiE,eAElB,eAACC,EAAA,EAAD,CACEtB,MAAM,UACNuB,QAtCU,WACc,KAAxBd,EAAaS,QACf9D,EAAM+D,QAAQV,GACdC,EAAgB,IAChBC,EAAS,OAETA,EAAS,sBAiCPC,KAAK,QACLQ,SAAiC,YAAvBhE,EAAMiE,aAJlB,SAME,eAAC,KAAD,CAAaG,SAAS,kBCxCfC,I,cAZMnB,IAAMC,MAAK,SAACnD,GAC/B,OACE,eAACgD,EAAA,EAAD,CACEJ,MAAO5C,EAAMsE,UAAY,UAAY,UACrCpE,QAAQ,YACRqE,UAAWvE,EAAMsE,UACjBH,QAASnE,EAAMwE,SAJjB,SAMGxE,EAAMtE,YC0BE+I,GAnCOvB,IAAMC,MAAK,SAACnD,GAChC,MAA8BoD,oBAAS,GAAvC,oBAAKsB,EAAL,KAAeC,EAAf,KACA,EAAwBvB,mBAAS,IAAjC,oBAAK1H,EAAL,KAAYkJ,EAAZ,KAgBA,OAAOF,EACL,eAACpC,GAAA,EAAD,CACE3E,GAAG,iBACHkH,WAAY,CAAE,aAAc,eAC5BC,OAbkB,WACpBH,GAAY,GACZ3E,EAAMyD,SAAS/H,IAYbe,MAAOf,EACPqJ,WAAS,EACTtB,SAXyB,SAACC,GAC5BkB,EAASlB,EAAEC,cAAclH,QAWvB+G,KAAK,UAGP,uBAAMwB,cAzBa,WACnBL,GAAY,GACZC,EAAS5E,EAAMtE,QAuBoB6I,UAAWvE,EAAMsE,UAApD,SACGtE,EAAMtE,W,wCCgBEuJ,I,OArCF/B,IAAMC,MAAK,SAACnD,GACvB,IAAM3C,EAAW+C,cACX8E,EAAuB,kBAAM7H,GPsGRrB,EOtG8BgE,EAAMtB,KAAKf,GPsGzB1B,EOtG6B+D,EAAMrC,GPsGZ,SAACN,GACnEA,EAASR,EAAe,YACxBrB,EAAyBS,EAAYD,GAAQuB,MAAK,SAAAC,GACjCgB,EAAaxC,EAAQC,GACpCoB,EAASmB,EAAaxC,EAAQC,IAC9BoB,EAASR,EAAe,oBALA,IAACb,EAAgBC,GOhGrCkJ,EAAqBC,uBACzB,SAAC1J,GACC2B,EAAS2C,EAAMb,aAAaa,EAAMrC,GAAIqC,EAAMtB,KAAKf,GAAI,CAAEjC,aAEzD,CAACsE,EAAO3C,IAGV,OACE,sBAAIkH,UAAU,iBAAd,UACE,eAACxB,GAAA,EAAD,CACEsC,KAAM,eAACC,GAAA,EAAD,IACNC,YAAa,eAACC,GAAA,EAAD,IACbC,KAAK,UACLC,QAAS1F,EAAMtB,KAAK/B,SAAW3B,EAAa2K,UAC5ClC,SAAU,SAAAC,GAAC,OAnBW,SAACA,GAC3B,IACI/G,EADiB+G,EAAEC,cAAc+B,QACP1K,EAAa2K,UAAY3K,EAAa4K,IACpEvI,EAAS2C,EAAMb,aAAaa,EAAMrC,GAAIqC,EAAMtB,KAAKf,GAAI,CAAEhB,YAgBpCkJ,CAAoBnC,MAGrC,eAAC,GAAD,CACEhI,MAAOsE,EAAMtB,KAAKhD,MAClB4I,UAAWtE,EAAMtB,KAAK/B,SAAW3B,EAAa2K,UAAY,iBAAmB,GAC7ElC,SAAU0B,IAEZ,eAACjB,EAAA,EAAD,CAAY4B,aAAW,SAAS3B,QAAS,SAAAT,GAAC,OAAIwB,KAA9C,SACE,eAAC,KAAD,aC+DOa,GArFE7C,IAAMC,MAAK,SAACnD,GAC3BgG,qBAAU,WRsFgB,IAAC/J,EQrFzBoB,GRqFyBpB,EQrFH+D,EAAMrC,GRqFoB,SAACN,GACnDA,EAASR,EAAe,YACxBrB,EAAsBS,GAAYsB,MAAK,SAAAC,GACrCH,EAPsB,SAAC4I,EAAwBhK,GACjD,MAAO,CAAES,KAAM,YAAauJ,QAAOhK,cAMxBiK,CAAW1I,EAAInB,KAAK8J,MAAOlK,IACpCoB,EAASR,EAAe,sBQxFvB,IAEH,IAAMQ,EAAW+C,cACX6F,EAAQ5F,aAA2C,SAAAC,GAAK,OAAIA,EAAM5B,KAAKsB,EAAMrC,OAE7EyI,EAAkBhB,uBAAY,kBAAMpF,EAAMqG,aAAa,MAAOrG,EAAMrC,MAAK,CAACqC,IAC1EsG,EAAqBlB,uBAAY,kBAAMpF,EAAMqG,aAAa,SAAUrG,EAAMrC,MAAK,CAACqC,IAChFuG,EAAwBnB,uBAAY,kBAAMpF,EAAMqG,aAAa,YAAarG,EAAMrC,MAAK,CACzFqC,IAOIwG,EAAsBpB,uBAC1B,SAAC1J,GACCsE,EAAMyG,oBAAoBzG,EAAMrC,GAAIjC,KAEtC,CAACsE,IAGG0G,EAAUtB,uBACd,SAAC1J,GACC2B,EAASsB,EAAUqB,EAAMrC,GAAIjC,MAE/B,CAAC2B,EAAU2C,IAGT2G,EAAeV,EAQnB,MAPyB,WAArBjG,EAAM4G,aACRD,EAAeV,EAAMY,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKjH,cAElB,cAArBG,EAAM4G,aACRD,EAAeV,EAAMY,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKjH,cAIzC,iCACE,gCACE,eAAC,GAAD,CAAenE,MAAOsE,EAAMtE,MAAO+H,SAAU+C,IAC7C,eAACtC,EAAA,EAAD,CACE4B,aAAW,SACX3B,QAhCe,WACrBnE,EAAM+G,eAAe/G,EAAMrC,KAgCrBqG,SAAiC,YAAvBhE,EAAMiE,aAHlB,SAKE,eAAC,KAAD,SAGJ,eAAC,GAAD,CAAaF,QAAS2C,EAASzC,aAAcjE,EAAMiE,eACnD,qBAAIM,UAAU,0BAAd,SACGoC,EAAaK,KAAI,SAAAF,GAAI,OACpB,eAAC,GAAD,CAEEpI,KAAMoI,EACNnJ,GAAIqC,EAAMrC,GACVc,UAAWuB,EAAMvB,UACjBU,aAAca,EAAMb,cAJf2H,EAAKnJ,SAQhB,uBAAK4G,UAAU,4BAAf,UACE,eAAC,GAAD,CACEC,SAAU4B,EACV1K,MAAO,MACP4I,UAAgC,QAArBtE,EAAM4G,WAAuB,iBAAmB,KAE7D,eAAC,GAAD,CACEpC,SAAU8B,EACV5K,MAAO,SACP4I,UAAgC,WAArBtE,EAAM4G,WAA0B,iBAAmB,KAEhE,eAAC,GAAD,CACEpC,SAAU+B,EACV7K,MAAO,YACP4I,UAAgC,cAArBtE,EAAM4G,WAA6B,iBAAmB,cCrF9DK,GAAY,SAACjH,GACxB,IAAMjC,EAAWsC,aAAqD,SAAAC,GAAK,OAAIA,EAAMvC,YAErF,OACE,gBAACmJ,GAAA,EAAD,CAAWC,OAAK,EAAC5C,UAAU,iBAA3B,UACE,eAAC1C,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,SACE,eAAC,GAAD,CAAagC,QAAS/D,EAAM+D,YAG9B,eAAClC,GAAA,EAAD,CAAMC,WAAS,EAACsF,QAAS,EAAzB,SACGrJ,EAASiJ,KAAI,SAAAF,GACZ,OACE,eAACjF,GAAA,EAAD,CAAM5D,MAAI,EAAV,SACE,eAACoJ,GAAA,EAAD,CAAOpH,UAAW,EAAGsE,UAAU,eAA/B,SACE,eAAC,GAAD,CACE7I,MAAOoL,EAAKpL,MACZ2K,aAAcrG,EAAMqG,aACpBO,WAAYE,EAAKD,OACjBlJ,GAAImJ,EAAKnJ,GACToJ,eAAgB/G,EAAM+G,eACtBN,oBAAqBzG,EAAMyG,oBAC3BhI,UAAWuB,EAAMvB,UACjBU,aAAca,EAAMb,aACpB8E,aAAc6C,EAAK7C,kBAXT6C,EAAKnJ,a,kBCgFlB2J,GA/EHpE,IAAMC,MAAK,WACrB6C,qBAAU,WACR3I,EAASD,KACR,IAEH,IAAMC,EAAW+C,cACXzD,EAAS0D,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,IAAI5D,UAC/E4K,QAAQC,IAAI7K,GAEZ,IAAMoH,EAAUqB,uBACd,SAAC1J,GACC2B,EAASQ,EAAcnC,MAEzB,CAAC2B,IAGGgJ,EAAejB,uBACnB,SAACqC,EAAsBxL,GACrB,IAAMyL,EXmDH,CACLhL,KAAMQ,EACNS,GWrDqD1B,EXsDrD4K,OWtDwCY,GACtCpK,EAASqK,KAEX,CAACrK,IAGG0J,EAAiB3B,uBACrB,SAACnJ,GACCoB,EAASK,EAAiBzB,MAE5B,CAACoB,IAGGoJ,EAAsBrB,uBAC1B,SAACzH,EAAYjC,GACX2B,EAASe,EAAsBT,EAAIjC,MAErC,CAAC2B,IAGH,OACE,eAAC,KAAD,UACE,uBAAKkH,UAAU,MAAf,UACE,gBAACoD,EAAA,EAAD,CAAQC,SAAS,QAAjB,UACE,gBAACC,EAAA,EAAD,CAAStD,UAAU,SAAnB,UACE,eAACL,EAAA,EAAD,CAAY4D,KAAK,QAAQlF,MAAM,UAAUkD,aAAW,OAApD,SACE,eAAC,IAAD,MAEF,eAACiC,EAAA,EAAD,CAAY7H,QAAQ,KAApB,kBACA,eAAC8C,EAAA,EAAD,CAAQJ,MAAM,UAAU1C,QAAS,WAAjC,sBAIU,YAAXvD,EAAuB,eAACqL,GAAA,EAAD,CAAgBpF,MAAM,cAAiB,MAGjE,gBAAC,KAAD,WACE,eAAC,KAAD,CACEqF,OAAK,EACLC,KAAM,IACNC,OAAQ,kBACN,eAAC,GAAD,CACE9B,aAAcA,EACdI,oBAAqBA,EACrBhI,UAAWA,EACXU,aAAcA,EACd4H,eAAgBA,EAChBhD,QAASA,OAIf,eAAC,KAAD,CAAOmE,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOF,OAAK,EAACC,KAAM,OAAQC,OAAQ,kBAAM,wDACzC,eAAC,KAAD,CAAUC,KAAM,IAAKC,GAAI,YAE3B,eAAClI,GAAD,Y,kBCnGFmI,GAAeC,aAAgB,CACnC7J,KXuB0B,WAGN,IAFpB4B,EAEmB,uDAFKhE,EACxBoL,EACmB,uCACnB,OAAQA,EAAOhL,MACb,IAAK,gBACH,IAAM8L,EAAU,eAAQlI,GAIxB,OAHAoH,EAAOjK,UAAUgL,SAAQ,SAAA3B,GACvB0B,EAAW1B,EAAKnJ,IAAM,MAEjB6K,EAET,IAAK,YACH,IAAME,EAAS,eAAQpI,GAEvB,OADAoI,EAAUhB,EAAOzL,YAAcyL,EAAOzB,MAC/ByC,EAET,KAAKrK,EACH,IAAM4H,EAAQ3F,EAAMoH,EAAOzL,YACrB2K,EAAaX,EAAMY,QAAO,SAAAC,GAAI,OAAIA,EAAKnJ,KAAO+J,EAAO1L,UAE3D,OADAsE,EAAMoH,EAAOzL,YAAc2K,EACpB,eAAKtG,GAEd,KAAKhC,EACH,IAAMoK,EAAS,eAAQpI,GACjB2F,EAAQyC,EAAUhB,EAAOhJ,KAAKiK,YAC9BC,EAAQ,CAAIlB,EAAOhJ,MAAX,mBAAoBuH,IAElC,OADAyC,EAAUhB,EAAOhJ,KAAKiK,YAAcC,EAC7BF,EAGT,KAAKnK,EACH,OAAO,2BACF+B,GADL,kBAEGoH,EAAOzL,WAAaqE,EAAMoH,EAAOzL,YAAY+K,KAAI,SAAAF,GAAI,OACpDA,EAAKnJ,KAAO+J,EAAO1L,OAAnB,2BAAiC8K,GAASY,EAAOvL,OAAU2K,OAKjE,KAAK9J,EACH,IAAM0L,EAAS,eAAQpI,GAEvB,OADAoI,EAAUhB,EAAO3J,SAASJ,IAAM,GACzB+K,EAGT,KAAK3L,EACH,IAAM2L,EAAS,eAAQpI,GAEvB,cADOoI,EAAUhB,EAAO/J,IACjB+K,EAET,QACE,OAAOpI,IW1EXvC,SZyB6B,WAGE,IAF/BuC,EAE8B,uDAFKhE,EACnCoL,EAC8B,uCAC9B,OAAQA,EAAOhL,MACb,IAAK,gBACH,OAAOgL,EAAOjK,UAAUuJ,KAAI,SAAAF,GAC1B,OAAO,2BAAKA,GAAZ,IAAkBD,OAAQ,MAAO5C,aAAc,YAInD,KAAKlH,EACH,OAAOuD,EAAMuG,QAAO,SAAAC,GAAI,OAAIA,EAAKnJ,KAAO+J,EAAO/J,MAEjD,KAAKX,EACH,IAAM6L,EAA+B,2BAChCnB,EAAO3J,UADyB,IAEnC8I,OAAQ,MACR5C,aAAc,SAEhB,MAAM,CAAE4E,GAAR,mBAAwBvI,IAG1B,KAAKrD,EACH,IAAM6L,EAAexI,EAAMf,MAAK,SAAAuH,GAAI,OAAIA,EAAKnJ,KAAO+J,EAAO/J,MAI3D,OAHImL,IACFA,EAAapN,MAAQgM,EAAOhM,OAEvB,YAAI4E,GAEb,KAAKpD,EACH,IAAMa,EAAWuC,EAAMf,MAAK,SAAAuH,GAAI,OAAIA,EAAKnJ,KAAO+J,EAAO/J,MAIvD,OAHII,IACFA,EAAS8I,OAASa,EAAOb,QAEpB,YAAIvG,GAGb,IAAK,6BACH,OAAOA,EAAM0G,KAAI,SAAAF,GAAI,OACnBA,EAAKnJ,KAAO+J,EAAO3L,WAAnB,2BAAqC+K,GAArC,IAA2C7C,aAAcyD,EAAO/K,SAAWmK,KAG/E,QACE,OAAOxG,IYpEXC,IbGwB,WAGF,IAFtBD,EAEqB,uDAFKhE,EAC1BoL,EACqB,uCACrB,OAAQA,EAAOhL,MACb,IAAK,iBACH,OAAO,2BAAK4D,GAAZ,IAAmB3D,OAAQ+K,EAAO/K,SACpC,IAAK,gBACH,OAAO,2BAAK2D,GAAZ,IAAmB1D,MAAO8K,EAAO9K,QAEnC,QACE,OAAO0D,IabXyI,MdAyB,WAGH,IAFtBzI,EAEqB,uDAFKhE,EAC1BoL,EACqB,uCACrB,OAAQA,EAAOhL,MACb,IAAK,yBACH,OAAO,2BAAK4D,GAAZ,IAAmB/D,WAAYmL,EAAOjL,QACxC,QACE,OAAO6D,McHA0I,GAAQC,aAAYX,GAAcY,aAAgBC,OAG/DC,OAAOJ,MAAQA,GCZfK,IAASlB,OACP,eAAC,IAAD,CAAUa,MAAOA,GAAjB,SACE,eAAC,GAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.8b94dc10.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'e2aa960b-33d4-4875-9d72-648602b61592',\r\n  },\r\n};\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  ...settings,\r\n});\r\n\r\nexport type UpdateTaskType = {\r\n  title: string;\r\n  description: string;\r\n  completed: boolean;\r\n  status: number;\r\n  priority: number;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\n\r\nexport type TodoListType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: D;\r\n};\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPrioties {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  completed: boolean;\r\n  status: TaskStatuses;\r\n  priority: TaskPrioties;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\n\r\ntype GetTaskResponse = {\r\n  error: string | null;\r\n  totalCount: number;\r\n  items: Array<TaskType>;\r\n};\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<Array<TodoListType>>('todo-lists');\r\n  },\r\n\r\n  createTodolists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', { title });\r\n  },\r\n\r\n  deleteTodoList(todolisID: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolisID}`);\r\n  },\r\n\r\n  updateTodolist(todolisID: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolisID}`, { title });\r\n  },\r\n\r\n  getTasks(todolistID: string) {\r\n    return instance.get<GetTaskResponse>(`todo-lists/${todolistID}/tasks`);\r\n  },\r\n  deleteTasks(todolistID: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistID}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, taskTitile: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {\r\n      title: taskTitile,\r\n    });\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n    return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  },\r\n};\r\n\r\n// export type AuthLoginType = {\r\n//   email: string\r\n//   password: string\r\n//   rememberMe: boolean\r\n// captcha?: string\r\n// }\r\n\r\n// export const authAPI = {\r\n//   login(data: AuthLoginType){\r\n//    return instance.post<ResponseType<any>>(`auth/login`, data)\r\n//   }\r\n// }\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{ userId: number }>>(`auth/login/`, data);\r\n  },\r\n\r\n  me() {\r\n    return instance.get(`/auth/me`);\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { authAPI, LoginParamsType } from '../../api/todolists-api';\r\nimport { handleServerAppError } from '../utils/error-utils';\r\nimport { appSetStatusAC } from './appReducer';\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return { ...state, isLoggedIn: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({ type: 'login/SET-IS-LOGGED-IN', value } as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n\r\n  authAPI.login(data).then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true));\r\n      dispatch(appSetStatusAC('succeeded'));\r\n    }\r\n  });\r\n};\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof appSetStatusAC>;\r\n","import { authAPI } from '../../api/todolists-api';\r\nimport { setIsLoggedInAC } from './auth-reducer';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as null | string,\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET-ERROR': {\r\n      return { ...state, error: action.error };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const appSetStatusAC = (status: RequestStatusType) => {\r\n  return { type: 'APP/SET-STATUS', status } as const;\r\n};\r\n\r\nexport const appSetErrorAC = (error: null | string) => {\r\n  return { type: 'APP/SET-ERROR', error } as const;\r\n};\r\n\r\ntype ActionsType = ReturnType<typeof appSetStatusAC> | ReturnType<typeof appSetErrorAC>;\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    debugger;\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true));\r\n    } else {\r\n    }\r\n  });\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todolistsAPI, TodoListType } from '../../api/todolists-api';\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\r\nimport { appSetErrorAC, appSetStatusAC, RequestStatusType } from './appReducer';\r\nimport { AppRootState } from './store/store';\r\n\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE';\r\nconst CHANGE_TODOLIST_FILTE = 'CHANGE-TODOLIST-FILTER';\r\n\r\nexport type ActionsTypes =\r\n  | ReturnType<typeof RemoveTodolistAC>\r\n  | ReturnType<typeof AddTodolistAc>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof appSetStatusAC>\r\n  | ReturnType<typeof appSetErrorAC>\r\n  | ReturnType<typeof entityStatusTodolistAC>;\r\n\r\nexport let todolist1 = v1();\r\nexport let todolist2 = v1();\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport type KeyType = 'all' | 'complited' | 'active';\r\n\r\nexport type TodolistDomainType = TodoListType & {\r\n  filter: KeyType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const todolistReducer = (\r\n  state: Array<TodolistDomainType> = initialState,\r\n  action: ActionsTypes\r\n): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'SET-TODOLISTS': {\r\n      return action.todolists.map(list => {\r\n        return { ...list, filter: 'all', entityStatus: 'idle' };\r\n      });\r\n    }\r\n\r\n    case REMOVE_TODOLIST:\r\n      return state.filter(list => list.id !== action.id);\r\n\r\n    case ADD_TODOLIST: {\r\n      const newTodolist: TodolistDomainType = {\r\n        ...action.todolist,\r\n        filter: 'all',\r\n        entityStatus: 'idle',\r\n      };\r\n      return [newTodolist, ...state];\r\n    }\r\n\r\n    case CHANGE_TODOLIST_TITLE: {\r\n      const todolistFind = state.find(list => list.id === action.id);\r\n      if (todolistFind) {\r\n        todolistFind.title = action.title;\r\n      }\r\n      return [...state];\r\n    }\r\n    case CHANGE_TODOLIST_FILTE: {\r\n      const todolist = state.find(list => list.id === action.id);\r\n      if (todolist) {\r\n        todolist.filter = action.filter;\r\n      }\r\n      return [...state];\r\n    }\r\n\r\n    case 'SET-ENTITY-STATUS-TODOLIST': {\r\n      return state.map(list =>\r\n        list.id === action.todolistID ? { ...list, entityStatus: action.status } : list\r\n      );\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const RemoveTodolistAC = (todolistId: string) => {\r\n  return { type: REMOVE_TODOLIST, id: todolistId } as const;\r\n};\r\n\r\nexport const AddTodolistAc = (todolist: TodoListType) => {\r\n  return {\r\n    type: ADD_TODOLIST,\r\n    todolist,\r\n  } as const;\r\n};\r\n\r\nexport const changeTodolistTitleAC = (newTodolistTitle: string, todolistId: string) => {\r\n  return {\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    id: todolistId,\r\n    title: newTodolistTitle,\r\n  } as const;\r\n};\r\n\r\nexport const changeTodolistFilterAC = (filter: KeyType, id: string) => {\r\n  return {\r\n    type: CHANGE_TODOLIST_FILTE,\r\n    id: id,\r\n    filter: filter,\r\n  } as const;\r\n};\r\n\r\nexport const entityStatusTodolistAC = (status: RequestStatusType, todolistID: string) => {\r\n  return { type: 'SET-ENTITY-STATUS-TODOLIST', status, todolistID } as const;\r\n};\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>) => {\r\n  return { type: 'SET-TODOLISTS', todolists } as const;\r\n};\r\n\r\nexport const fetchTodolistsThunk = (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  getState: () => AppRootState\r\n) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI.getTodolists().then(res => {\r\n    dispatch(setTodolistsAC(res.data));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  });\r\n};\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  dispatch(entityStatusTodolistAC('loading', todolistId));\r\n  todolistsAPI.deleteTodoList(todolistId).then(res => {\r\n    dispatch(RemoveTodolistAC(todolistId));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  });\r\n};\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI\r\n    .createTodolists(title)\r\n    .then(resp => {\r\n      if (resp.data.resultCode === 0) {\r\n        dispatch(AddTodolistAc(resp.data.data.item));\r\n        dispatch(appSetStatusAC('succeeded'));\r\n      } else {\r\n        // handleServerAppError(dispatch, resp.data);\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      // handleServerNetworkError(dispatch, err.message);\r\n    });\r\n};\r\n\r\nexport const changeTodolistTitleTC = (todolisID: string, title: string) => (dispatch: Dispatch) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI.updateTodolist(todolisID, title).then(resp => {\r\n    dispatch(changeTodolistTitleAC(title, todolisID));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { TaskType, todolistsAPI, UpdateTaskType } from '../../api/todolists-api';\r\nimport { TasksStateType } from '../../App';\r\nimport {\r\n  AddTodolistAc,\r\n  RemoveTodolistAC,\r\n  REMOVE_TODOLIST,\r\n  ADD_TODOLIST,\r\n  setTodolistsAC,\r\n} from './todolists-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootState } from './store/store';\r\nimport { appSetErrorAC, appSetStatusAC } from './appReducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\r\n\r\nconst REMOVE_TASK = 'REMOVE-TASK';\r\nconst ADD_TASK = 'ADD-TASKS';\r\nconst CHANGE_TASK = 'CHANGE-TASK';\r\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE';\r\n\r\ntype ActionsTypes =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof changeTaskAC>\r\n  | ReturnType<typeof AddTodolistAc>\r\n  | ReturnType<typeof RemoveTodolistAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof setTasksAC>;\r\n\r\nconst initialState: TasksStateType = {};\r\nexport const tasksReducer = (\r\n  state: TasksStateType = initialState,\r\n  action: ActionsTypes\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'SET-TODOLISTS':\r\n      const stateCopy1 = { ...state };\r\n      action.todolists.forEach(list => {\r\n        stateCopy1[list.id] = [];\r\n      });\r\n      return stateCopy1;\r\n\r\n    case 'SET-TASKS': {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = action.tasks;\r\n      return stateCopy;\r\n    }\r\n    case REMOVE_TASK: {\r\n      const tasks = state[action.todolistId];\r\n      const filterTask = tasks.filter(list => list.id !== action.taskId);\r\n      state[action.todolistId] = filterTask;\r\n      return { ...state };\r\n    }\r\n    case ADD_TASK: {\r\n      const stateCopy = { ...state };\r\n      const tasks = stateCopy[action.task.todoListId];\r\n      const newTasks = [action.task, ...tasks];\r\n      stateCopy[action.task.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n\r\n    case CHANGE_TASK: {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(list =>\r\n          list.id === action.taskId ? { ...list, ...action.model } : list\r\n        ),\r\n      };\r\n    }\r\n\r\n    case ADD_TODOLIST: {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolist.id] = [];\r\n      return stateCopy;\r\n    }\r\n\r\n    case REMOVE_TODOLIST: {\r\n      const stateCopy = { ...state };\r\n      delete stateCopy[action.id];\r\n      return stateCopy;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n  return { type: REMOVE_TASK, taskId, todolistId } as const;\r\n};\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return {\r\n    type: ADD_TASK,\r\n    task,\r\n  } as const;\r\n};\r\n\r\nexport const changeTaskAC = (\r\n  taskId: string,\r\n  todolistId: string,\r\n  model: UpdateDomainTaskModelType\r\n) => {\r\n  return {\r\n    type: CHANGE_TASK,\r\n    taskId,\r\n    model,\r\n    todolistId,\r\n  } as const;\r\n};\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n  return { type: 'SET-TASKS', tasks, todolistId } as const;\r\n};\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI.getTasks(todolistId).then(res => {\r\n    dispatch(setTasksAC(res.data.items, todolistId));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  });\r\n};\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI.deleteTasks(todolistId, taskId).then(res => {\r\n    const action = removeTaskAC(taskId, todolistId);\r\n    dispatch(removeTaskAC(taskId, todolistId));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  });\r\n};\r\n\r\nexport const addTaskTC = (todoID: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  todolistsAPI\r\n    .createTask(todoID, taskTitle)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        let task = res.data.data.item;\r\n        dispatch(addTaskAC(task));\r\n        dispatch(appSetStatusAC('succeeded'));\r\n      } else {\r\n        handleServerAppError(dispatch, res.data);\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message);\r\n    });\r\n};\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string;\r\n  description?: string;\r\n  completed?: boolean;\r\n  status?: number;\r\n  priority?: number;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\n\r\nexport const updateTaskTC = (\r\n  todoId: string,\r\n  taskId: string,\r\n  domainModel: UpdateDomainTaskModelType\r\n) => (dispatch: Dispatch, getState: () => AppRootState) => {\r\n  dispatch(appSetStatusAC('loading'));\r\n  const appState = getState();\r\n  const allTasks = appState.task;\r\n  const tasksForClickedTodo = allTasks[todoId];\r\n\r\n  const clickedTask = tasksForClickedTodo.find(t => {\r\n    return t.id === taskId;\r\n  });\r\n\r\n  if (clickedTask) {\r\n    const model: UpdateTaskType = {\r\n      title: clickedTask.title,\r\n      status: clickedTask.status,\r\n      priority: clickedTask.priority,\r\n      description: clickedTask.description,\r\n      startDate: clickedTask.startDate,\r\n      deadline: clickedTask.deadline,\r\n      completed: clickedTask.completed,\r\n      ...domainModel,\r\n    };\r\n\r\n    todolistsAPI.updateTask(todoId, taskId, model).then(res => {\r\n      dispatch(changeTaskAC(taskId, todoId, domainModel));\r\n      dispatch(appSetStatusAC('succeeded'));\r\n    });\r\n  }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { appSetErrorAC, appSetStatusAC } from '../state/appReducer';\r\nimport { ResponseType } from '../../api/todolists-api';\r\nimport { setIsLoggedInAC } from '../state/auth-reducer';\r\n\r\nexport type ErrorUtilsActionType =\r\n  | ReturnType<typeof appSetStatusAC>\r\n  | ReturnType<typeof appSetErrorAC>\r\n  | ReturnType<typeof setIsLoggedInAC>;\r\n\r\nexport const handleServerNetworkError = (\r\n  dispatch: Dispatch<ErrorUtilsActionType>,\r\n  message: string\r\n) => {\r\n  dispatch(appSetErrorAC(message));\r\n  dispatch(appSetStatusAC('failed'));\r\n};\r\n\r\nexport const handleServerAppError = <T>(\r\n  dispatch: Dispatch<ErrorUtilsActionType>,\r\n  data: ResponseType<T>\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(appSetErrorAC(data.messages[0]));\r\n    dispatch(appSetStatusAC('succeeded'));\r\n  } else {\r\n    dispatch(appSetErrorAC('Some Error'));\r\n  }\r\n};\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../state/store/store';\r\nimport { appSetErrorAC } from '../../state/appReducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const dispatch = useDispatch();\r\n  const error = useSelector<AppRootState, string | null>(state => state.app.error);\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(appSetErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n} from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../state/store/store';\r\nimport { LoginParamsType } from '../../../api/todolists-api';\r\nimport { loginTC } from '../../state/auth-reducer';\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    validate: values => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = 'Requeired';\r\n      } else if (values.password.length <= 3) {\r\n        errors.password = 'Pawword must long at 3 sumbols';\r\n      }\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={4}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormLabel>\r\n            <p>\r\n              To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'} target={'_blank'}>\r\n                here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\r\n            {formik.touched.email && <div style={{ color: 'red' }}>{formik.errors.email}</div>}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password && (\r\n              <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n            )}\r\n\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox {...formik.getFieldProps('rememberMe')} />}\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\nimport './AddItemForm.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport { RequestStatusType } from '../../state/appReducer';\r\n\r\ntype addItemFormPropsType = {\r\n  addItem: (newValue: string) => void;\r\n  entityStatus?: RequestStatusType;\r\n};\r\n\r\nconst AddItemForm = React.memo((props: addItemFormPropsType) => {\r\n  let [newTaskTitle, setNewTaskTitle] = useState('');\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTaskTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const addTask = () => {\r\n    if (newTaskTitle.trim() !== '') {\r\n      props.addItem(newTaskTitle);\r\n      setNewTaskTitle('');\r\n      setError(null);\r\n    } else {\r\n      setError('Field is required');\r\n    }\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.key === 'Enter') {\r\n      if (newTaskTitle.trim() !== '') {\r\n        props.addItem(newTaskTitle);\r\n        setNewTaskTitle('');\r\n      } else {\r\n        setError('Field is required');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        label={!!error ? error : 'Type Text'}\r\n        error={!!error}\r\n        value={newTaskTitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        disabled={props.entityStatus === 'loading'}\r\n      />\r\n      <IconButton\r\n        color=\"primary\"\r\n        onClick={addTask}\r\n        size=\"small\"\r\n        disabled={props.entityStatus === 'loading'}\r\n      >\r\n        <NoteAddIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default AddItemForm;\r\n","import React from 'react';\r\nimport './Button.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ButtonPropsType = {\r\n  title: string;\r\n  callBack: () => void;\r\n  nameClass: string;\r\n};\r\n\r\nconst ButtonFilter = React.memo((props: ButtonPropsType) => {\r\n  return (\r\n    <Button\r\n      color={props.nameClass ? 'primary' : 'default'}\r\n      variant=\"contained\"\r\n      className={props.nameClass}\r\n      onClick={props.callBack}\r\n    >\r\n      {props.title}\r\n    </Button>\r\n  );\r\n});\r\nexport default ButtonFilter;\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\ntype EditTableSpanPropsType = {\r\n  title: string;\r\n  nameClass?: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nconst EditTableSpan = React.memo((props: EditTableSpanPropsType) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [title, setTitle] = useState('');\r\n\r\n  const activeModeOn = () => {\r\n    setEditMode(true);\r\n    setTitle(props.title);\r\n  };\r\n\r\n  const activeModeOff = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField\r\n      id=\"standard-basic\"\r\n      inputProps={{ 'aria-label': 'description' }}\r\n      onBlur={activeModeOff}\r\n      value={title}\r\n      autoFocus\r\n      onChange={onChangeTitleHandler}\r\n      size=\"small\"\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activeModeOn} className={props.nameClass}>\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport default EditTableSpan;\r\n","import { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport React, { ChangeEvent, useCallback } from 'react';\r\nimport './Task.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport EditTableSpan from '../EditTableSpan/EditTableSpan';\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api';\r\nimport { removeTaskTC, UpdateDomainTaskModelType } from '../../state/task-reducer';\r\n\r\ntype TaskProps = {\r\n  id: string;\r\n  task: TaskType;\r\n  addTaskAC: (task: TaskType) => void;\r\n  updateTaskTC: (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => void;\r\n};\r\n\r\nconst Task = React.memo((props: TaskProps) => {\r\n  const dispatch = useDispatch();\r\n  const onClickHandlerRemove = () => dispatch(removeTaskTC(props.task.id, props.id));\r\n  const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked;\r\n    let status = newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New;\r\n    dispatch(props.updateTaskTC(props.id, props.task.id, { status }));\r\n  };\r\n  const changeTitleHandler = useCallback(\r\n    (title: string) => {\r\n      dispatch(props.updateTaskTC(props.id, props.task.id, { title }));\r\n    },\r\n    [props, dispatch]\r\n  );\r\n\r\n  return (\r\n    <li className=\"todolist__list\">\r\n      <Checkbox\r\n        icon={<FavoriteBorder />}\r\n        checkedIcon={<Favorite />}\r\n        name=\"checked\"\r\n        checked={props.task.status === TaskStatuses.Completed ? true : false}\r\n        onChange={e => changeStatusHandler(e)}\r\n      />\r\n\r\n      <EditTableSpan\r\n        title={props.task.title}\r\n        nameClass={props.task.status === TaskStatuses.Completed ? 'todolist__done' : ''}\r\n        onChange={changeTitleHandler}\r\n      />\r\n      <IconButton aria-label=\"delete\" onClick={e => onClickHandlerRemove()}>\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n});\r\n\r\nexport default Task;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport './Todolist.scss';\r\nimport AddItemForm from '../AddItemForm/AddItemForm';\r\nimport ButtonFilter from '../Button/Button';\r\nimport EditTableSpan from '../EditTableSpan/EditTableSpan';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Task from '../Task/Task';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../state/store/store';\r\nimport { KeyType } from '../../state/todolists-reducer';\r\nimport { TaskType } from '../../../api/todolists-api';\r\nimport { addTaskTC, fetchTasksTC, UpdateDomainTaskModelType } from '../../state/task-reducer';\r\nimport { RequestStatusType } from '../../state/appReducer';\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  changeFilter: (changeValue: KeyType, filterId: string) => void;\r\n  filterTask: KeyType;\r\n  id: string;\r\n  removeTodolist: (id: string) => void;\r\n  changeTodolistTitle: (id: string, title: string) => void;\r\n  addTaskAC: (task: TaskType) => void;\r\n  updateTaskTC: (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => void;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nconst Todolist = React.memo((props: PropsType) => {\r\n  useEffect(() => {\r\n    dispatch(fetchTasksTC(props.id));\r\n  }, []);\r\n\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.task[props.id]);\r\n\r\n  const changeAllFilter = useCallback(() => props.changeFilter('all', props.id), [props]);\r\n  const changeActiveFilter = useCallback(() => props.changeFilter('active', props.id), [props]);\r\n  const changeCompletedFilter = useCallback(() => props.changeFilter('complited', props.id), [\r\n    props,\r\n  ]);\r\n\r\n  const removeTodoList = () => {\r\n    props.removeTodolist(props.id);\r\n  };\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (title: string) => {\r\n      props.changeTodolistTitle(props.id, title);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTaskTC(props.id, title));\r\n    },\r\n    [dispatch, props]\r\n  );\r\n\r\n  let taskTodolist = tasks;\r\n  if (props.filterTask === 'active') {\r\n    taskTodolist = tasks.filter(list => list.completed === false);\r\n  }\r\n  if (props.filterTask === 'complited') {\r\n    taskTodolist = tasks.filter(list => list.completed === true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditTableSpan title={props.title} onChange={changeTodoListTitle} />\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          onClick={removeTodoList}\r\n          disabled={props.entityStatus === 'loading'}\r\n        >\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\r\n      <ul className=\"todolist__list__wrapper\">\r\n        {taskTodolist.map(list => (\r\n          <Task\r\n            key={list.id}\r\n            task={list}\r\n            id={props.id}\r\n            addTaskAC={props.addTaskAC}\r\n            updateTaskTC={props.updateTaskTC}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <div className=\"todolist__button__wrapper\">\r\n        <ButtonFilter\r\n          callBack={changeAllFilter}\r\n          title={'All'}\r\n          nameClass={props.filterTask === 'all' ? 'button__filter' : ''}\r\n        />\r\n        <ButtonFilter\r\n          callBack={changeActiveFilter}\r\n          title={'Active'}\r\n          nameClass={props.filterTask === 'active' ? 'button__filter' : ''}\r\n        />\r\n        <ButtonFilter\r\n          callBack={changeCompletedFilter}\r\n          title={'Completed'}\r\n          nameClass={props.filterTask === 'complited' ? 'button__filter' : ''}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Todolist;\r\n","import { Container, Grid, Paper } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TaskType } from '../../../api/todolists-api';\r\nimport { AppRootState } from '../../state/store/store';\r\nimport { UpdateDomainTaskModelType } from '../../state/task-reducer';\r\nimport { TodolistDomainType } from '../../state/todolists-reducer';\r\nimport AddItemForm from '../AddItemForm/AddItemForm';\r\nimport Todolist from '../Todolist/Todolist';\r\nimport { KeyType } from '../../state/todolists-reducer';\r\n\r\ntype PropsType = {\r\n  addItem: (newValue: string) => void;\r\n  changeFilter: (changeValue: KeyType, filterId: string) => void;\r\n  removeTodolist: (id: string) => void;\r\n  changeTodolistTitle: (id: string, title: string) => void;\r\n  addTaskAC: (task: TaskType) => void;\r\n  updateTaskTC: (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => void;\r\n};\r\n\r\nexport const Todolists = (props: PropsType) => {\r\n  const todolist = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolist);\r\n\r\n  return (\r\n    <Container fixed className=\"todoList__form\">\r\n      <Grid container justify=\"center\">\r\n        <AddItemForm addItem={props.addItem} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={3}>\r\n        {todolist.map(list => {\r\n          return (\r\n            <Grid item key={list.id}>\r\n              <Paper elevation={3} className=\"paper__style\">\r\n                <Todolist\r\n                  title={list.title}\r\n                  changeFilter={props.changeFilter}\r\n                  filterTask={list.filter}\r\n                  id={list.id}\r\n                  removeTodolist={props.removeTodolist}\r\n                  changeTodolistTitle={props.changeTodolistTitle}\r\n                  addTaskAC={props.addTaskAC}\r\n                  updateTaskTC={props.updateTaskTC}\r\n                  entityStatus={list.entityStatus}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect } from 'react';\nimport Todolist from './modules/components/Todolist/Todolist';\nimport './App.scss';\nimport AddItemForm from './modules/components/AddItemForm/AddItemForm';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Container, Toolbar, Typography, Button } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Grid } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  changeTodolistFilterAC,\n  KeyType,\n  fetchTodolistsThunk,\n  removeTodolistTC,\n  addTodolistTC,\n  changeTodolistTitleTC,\n} from './modules/state/todolists-reducer';\nimport { addTaskAC, updateTaskTC } from './modules/state/task-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './modules/state/store/store';\nimport { TaskType } from './api/todolists-api';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { RequestStatusType } from './modules/state/appReducer';\nimport { ErrorSnackbar } from './modules/components/ErrorSnackbar/ErrorSnackbar';\nimport { Login } from './modules/components/Login/Login';\nimport { Todolists } from './modules/components/Todolists/Todolists';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n\nconst App = React.memo(() => {\n  useEffect(() => {\n    dispatch(fetchTodolistsThunk);\n  }, []);\n\n  const dispatch = useDispatch();\n  const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status);\n  console.log(status);\n\n  const addItem = useCallback(\n    (title: string) => {\n      dispatch(addTodolistTC(title));\n    },\n    [dispatch]\n  );\n\n  const changeFilter = useCallback(\n    (changeValue: KeyType, todolistId: string) => {\n      const action = changeTodolistFilterAC(changeValue, todolistId);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  const removeTodolist = useCallback(\n    (todolistId: string) => {\n      dispatch(removeTodolistTC(todolistId));\n    },\n    [dispatch]\n  );\n\n  const changeTodolistTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(changeTodolistTitleTC(id, title));\n    },\n    [dispatch]\n  );\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <AppBar position=\"fixed\">\n          <Toolbar className=\"header\">\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\">News</Typography>\n            <Button color=\"inherit\" variant={'outlined'}>\n              Login\n            </Button>\n          </Toolbar>\n          {status === 'loading' ? <LinearProgress color=\"secondary\" /> : ''}\n        </AppBar>\n\n        <Switch>\n          <Route\n            exact\n            path={'/'}\n            render={() => (\n              <Todolists\n                changeFilter={changeFilter}\n                changeTodolistTitle={changeTodolistTitle}\n                addTaskAC={addTaskAC}\n                updateTaskTC={updateTaskTC}\n                removeTodolist={removeTodolist}\n                addItem={addItem}\n              />\n            )}\n          />\n          <Route path={'/login'} render={() => <Login />} />\n          <Route exact path={'/404'} render={() => <h1>404 Page Not Found</h1>} />\n          <Redirect from={'*'} to={'/404'}></Redirect>\n        </Switch>\n        <ErrorSnackbar />\n      </div>\n    </BrowserRouter>\n  );\n});\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { tasksReducer } from '../task-reducer';\r\nimport { todolistReducer } from '../todolists-reducer';\r\nimport { appReducer } from '../appReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer } from '../auth-reducer';\r\n\r\nconst rootReducers = combineReducers({\r\n  task: tasksReducer,\r\n  todolist: todolistReducer,\r\n  app: appReducer,\r\n  login: authReducer,\r\n});\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducers>;\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './modules/state/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}